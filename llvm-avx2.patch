diff --git a/tools/clang/scripts/build.py b/tools/clang/scripts/build.py
index 76106adefdce2..70abf90e1cd22 100755
--- a/tools/clang/scripts/build.py
+++ b/tools/clang/scripts/build.py
@@ -167,7 +167,7 @@ def CheckoutGitRepo(name, git_url, commit, dir):
                    fail_hard=False)
         and RunCommand(['git', 'fetch'], fail_hard=False)
         and RunCommand(['git', 'checkout', commit], fail_hard=False)
-        and RunCommand(['git', 'clean', '-f'], fail_hard=False)):
+        and RunCommand(['git', 'clean', '-ffd'], fail_hard=False)):
       return
 
     # If we can't use the current repo, delete it.
@@ -377,6 +377,13 @@ def BuildLibXml2():
           '-DLIBXML2_WITH_XPATH=OFF',
           '-DLIBXML2_WITH_XPTR=OFF',
           '-DLIBXML2_WITH_ZLIB=OFF',
+          '-DCMAKE_C_COMPILER=' + os.path.join(PINNED_CLANG_DIR, 'bin', 'clang'),
+          '-DCMAKE_CXX_COMPILER=' + os.path.join(PINNED_CLANG_DIR, 'bin', 'clang++'),
+          '-DCMAKE_C_FLAGS_RELEASE=-O3 -march=x86-64-v3 -w ',
+          '-DCMAKE_CXX_FLAGS_RELEASE=-O3 -march=x86-64-v3 -w ',
+          '-DCMAKE_EXE_LINKER_FLAGS=-w ',
+          '-DCMAKE_SHARED_LINKER_FLAGS=-w ',
+          '-DCMAKE_MODULE_LINKER_FLAGS=-w ',
           '..',
       ],
       setenv=True)
@@ -454,6 +461,13 @@ def BuildZStd():
           '-DCMAKE_OSX_ARCHITECTURES=arm64;x86_64',
           '-DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded',  # /MT to match LLVM.
           '-DZSTD_BUILD_SHARED=OFF',
+          '-DCMAKE_C_COMPILER=' + os.path.join(PINNED_CLANG_DIR, 'bin', 'clang'),
+          '-DCMAKE_CXX_COMPILER=' + os.path.join(PINNED_CLANG_DIR, 'bin', 'clang++'),
+          '-DCMAKE_C_FLAGS_RELEASE=-O3 -march=x86-64-v3 -w ',
+          '-DCMAKE_CXX_FLAGS_RELEASE=-O3 -march=x86-64-v3 -w ',
+          '-DCMAKE_EXE_LINKER_FLAGS=-w ',
+          '-DCMAKE_SHARED_LINKER_FLAGS=-w ',
+          '-DCMAKE_MODULE_LINKER_FLAGS=-w ',
           '../build/cmake',
       ],
       setenv=True)
@@ -686,9 +700,6 @@ def main():
   parser.add_argument('--with-android', type=gn_arg, nargs='?', const=True,
                       help='build the Android ASan runtime (linux only)',
                       default=sys.platform.startswith('linux'))
-  parser.add_argument('--pic',
-                      action='store_true',
-                      help='Uses PIC when building LLVM')
   parser.add_argument('--with-fuchsia',
                       type=gn_arg,
                       nargs='?',
@@ -705,17 +716,16 @@ def main():
   parser.add_argument('--with-ccache',
                       action='store_true',
                       help='Use ccache to build the stage 1 compiler')
-  parser.add_argument('--without-zstd',
-                      dest='with_zstd',
-                      action='store_false',
-                      help='Disable zstd in the build')
 
   args = parser.parse_args()
 
   global CLANG_REVISION, PACKAGE_VERSION, LLVM_BUILD_DIR
 
-  if (args.pgo or args.thinlto) and not args.bootstrap:
-    print('--pgo/--thinlto requires --bootstrap')
+  if not sys.platform.startswith('linux'):
+    print('Customized build script only works with Linux')
+    return 1
+  if not args.bootstrap:
+    print('Customized build script requires --bootstrap')
     return 1
   if args.with_android and not os.path.exists(ANDROID_NDK_DIR):
     print('Android NDK not found at ' + ANDROID_NDK_DIR)
@@ -797,17 +807,12 @@ def main():
   # LLVM_ENABLE_LLD).
   cc, cxx, lld = None, None, None
 
-  cflags = []
-  cxxflags = []
-  ldflags = []
-
-  targets = 'AArch64;ARM;LoongArch;Mips;PowerPC;RISCV;SystemZ;WebAssembly;X86'
-  projects = 'clang;lld;clang-tools-extra'
-  if args.bolt:
-    projects += ';bolt'
+  cflags = ['-O3 -march=x86-64-v3 -pthread -w']
+  cxxflags = ['-O3 -march=x86-64-v3 -pthread -w']
+  ldflags = ['-fuse-ld=lld -pthread -w']
 
-  pic_default = sys.platform == 'win32'
-  pic_mode = 'ON' if args.pic or pic_default else 'OFF'
+  targets = 'AArch64;ARM;X86'
+  projects = 'clang;lld;clang-tools-extra;bolt;polly'
 
   base_cmake_args = [
       '-GNinja',
@@ -816,7 +821,7 @@ def main():
       '-DLLVM_ENABLE_PROJECTS=' + projects,
       '-DLLVM_ENABLE_RUNTIMES=compiler-rt',
       '-DLLVM_TARGETS_TO_BUILD=' + targets,
-      f'-DLLVM_ENABLE_PIC={pic_mode}',
+      '-DLLVM_ENABLE_PIC=ON',
       '-DLLVM_ENABLE_TERMINFO=OFF',
       '-DLLVM_ENABLE_Z3_SOLVER=OFF',
       '-DCLANG_PLUGIN_SUPPORT=OFF',
@@ -841,7 +846,7 @@ def main():
       # `bootstrap` tool:
       # https://github.com/rust-lang/rust/blob/021861aea8de20c76c7411eb8ada7e8235e3d9b5/src/bootstrap/src/core/build_steps/llvm.rs#L348
       '-DLLVM_INSTALL_UTILS=ON',
-      '-DLLVM_ENABLE_ZSTD=%s' % ('ON' if args.with_zstd else 'OFF'),
+      '-DLLVM_ENABLE_ZSTD=ON'
   ]
 
   if sys.platform == 'darwin':
@@ -918,12 +923,12 @@ def main():
   cflags += libxml_cflags
   cxxflags += libxml_cflags
 
-  if args.with_zstd:
-    # Statically link zstd to make lld support zstd compression for debug info.
-    zstd_cmake_args, zstd_cflags = BuildZStd()
-    base_cmake_args += zstd_cmake_args
-    cflags += zstd_cflags
-    cxxflags += zstd_cflags
+  
+  # Statically link zstd to make lld support zstd compression for debug info.
+  zstd_cmake_args, zstd_cflags = BuildZStd()
+  base_cmake_args += zstd_cmake_args
+  cflags += zstd_cflags
+  cxxflags += zstd_cflags
 
   lit_excludes = []
   if sys.platform.startswith('linux'):
@@ -1040,9 +1045,9 @@ def main():
     cxxflags += ['-Wno-backend-plugin']
 
     instrument_args = base_cmake_args + [
-        '-DLLVM_ENABLE_PROJECTS=clang',
-        '-DCMAKE_C_FLAGS=' + ' '.join(cflags),
-        '-DCMAKE_CXX_FLAGS=' + ' '.join(cxxflags),
+        '-DLLVM_ENABLE_PROJECTS=clang;polly',
+        '-DCMAKE_C_FLAGS=-mllvm -vp-counters-per-site=3 ' + ' '.join(cflags),
+        '-DCMAKE_CXX_FLAGS=-mllvm -vp-counters-per-site=3 ' + ' '.join(cxxflags),
         '-DCMAKE_EXE_LINKER_FLAGS=' + ' '.join(ldflags),
         '-DCMAKE_SHARED_LINKER_FLAGS=' + ' '.join(ldflags),
         '-DCMAKE_MODULE_LINKER_FLAGS=' + ' '.join(ldflags),
@@ -1085,8 +1090,11 @@ def main():
     with open(training_source, 'wb') as f:
       DownloadUrl(CDS_URL + '/' + training_source, f)
     train_cmd = [os.path.join(LLVM_INSTRUMENTED_DIR, 'bin', 'clang++'),
-                '-target', 'x86_64-unknown-unknown', '-O2', '-g', '-std=c++14',
-                 '-fno-exceptions', '-fno-rtti', '-w', '-c', training_source]
+                 '-target', 'x86_64-unknown-unknown', '-O3', '-g', '-std=c++20',
+                 '-march=x86-64-v3', '-ffp-contract=fast', '-fmerge-all-constants',
+                 '-fdata-sections', '-ffunction-sections', '-fno-exceptions',
+                 '-fno-rtti', '-mllvm', '-polly', '-Rpass-analysis=polly',
+                 '-w', '-c', training_source]
     if sys.platform == 'darwin':
       train_cmd.extend(['-isysroot', isysroot])
     RunCommand(train_cmd, setenv=True)
@@ -1138,11 +1146,6 @@ def main():
   if lld is not None: base_cmake_args.append('-DCMAKE_LINKER=' + lld)
   final_install_dir = args.install_dir if args.install_dir else LLVM_BUILD_DIR
   cmake_args = base_cmake_args + [
-      '-DCMAKE_C_FLAGS=' + ' '.join(cflags),
-      '-DCMAKE_CXX_FLAGS=' + ' '.join(cxxflags),
-      '-DCMAKE_EXE_LINKER_FLAGS=' + ' '.join(ldflags),
-      '-DCMAKE_SHARED_LINKER_FLAGS=' + ' '.join(ldflags),
-      '-DCMAKE_MODULE_LINKER_FLAGS=' + ' '.join(ldflags),
       '-DCMAKE_INSTALL_PREFIX=' + final_install_dir,
   ]
   if not args.no_tools:
@@ -1152,10 +1155,36 @@ def main():
         os.path.join(CHROMIUM_DIR, 'tools', 'clang'),
         '-DCHROMIUM_TOOLS=%s' % ';'.join(chrome_tools)
     ])
-  if args.pgo:
+  if args.pgo and not args.thinlto:
+    cmake_args.append('-DLLVM_PROFDATA_FILE=-funique-section-names -fseparate-named-sections -fsplit-machine-functions -mllvm -enable-ext-tsp-block-placement -fdata-sections -ffunction-sections ' + LLVM_PROFDATA_FILE)
+    cmake_args.append('-DCMAKE_C_FLAGS=-funique-section-names -fseparate-named-sections -fsplit-machine-functions -mllvm -enable-ext-tsp-block-placement -fdata-sections -ffunction-sections  ' + ' '.join(cflags))
+    cmake_args.append('-DCMAKE_CXX_FLAGS=-funique-section-names -fseparate-named-sections -fsplit-machine-functions -mllvm -enable-ext-tsp-block-placement -fdata-sections -ffunction-sections  ' + ' '.join(cxxflags))
+    cmake_args.append('-DCMAKE_EXE_LINKER_FLAGS=-Wl,-z,keep-text-section-prefix -Wl,-O2 -Wl,--gc-sections ' + ' '.join(ldflags))
+    cmake_args.append('-DCMAKE_SHARED_LINKER_FLAGS=-Wl,-z,keep-text-section-prefix -Wl,-O2 -Wl,--gc-sections ' + ' '.join(ldflags))
+    cmake_args.append('-DCMAKE_MODULE_LINKER_FLAGS=-Wl,-z,keep-text-section-prefix -Wl,-O2 -Wl,--gc-sections ' + ' '.join(ldflags))
+  if args.thinlto and not args.pgo:
+    cmake_args.append('-DLLVM_ENABLE_LTO=Thin')
+    cmake_args.append('-DLLVM_PARALLEL_LINK_JOBS=16')
+    cmake_args.append('-DCMAKE_C_FLAGS=-flto=thin -fwhole-program-vtables -fsplit-lto-unit -fdata-sections -ffunction-sections  ' + ' '.join(cflags))
+    cmake_args.append('-DCMAKE_CXX_FLAGS=-flto=thin -fwhole-program-vtables -fsplit-lto-unit -fdata-sections -ffunction-sections  ' + ' '.join(cxxflags))
+    cmake_args.append('-DCMAKE_EXE_LINKER_FLAGS=-flto=thin -fwhole-program-vtables -Wl,--lto-O3 -Wl,--lto-CGO3 -Wl,-mllvm,-import-instr-limit=5 -Wl,-O2 -Wl,--gc-sections ' + ' '.join(ldflags))
+    cmake_args.append('-DCMAKE_SHARED_LINKER_FLAGS=-flto=thin -fwhole-program-vtables -Wl,--lto-O3 -Wl,--lto-CGO3 -Wl,-mllvm,-import-instr-limit=5 -Wl,-O2 -Wl,--gc-sections ' + ' '.join(ldflags))
+    cmake_args.append('-DCMAKE_MODULE_LINKER_FLAGS=-flto=thin -fwhole-program-vtables -Wl,--lto-O3 -Wl,--lto-CGO3 -Wl,-mllvm,-import-instr-limit=5 -Wl,-O2 -Wl,--gc-sections ' + ' '.join(ldflags))
+  if args.thinlto and args.pgo:
     cmake_args.append('-DLLVM_PROFDATA_FILE=' + LLVM_PROFDATA_FILE)
-  if args.thinlto:
     cmake_args.append('-DLLVM_ENABLE_LTO=Thin')
+    cmake_args.append('-DLLVM_PARALLEL_LINK_JOBS=16')
+    cmake_args.append('-DCMAKE_C_FLAGS=-flto=thin -fwhole-program-vtables -fsplit-lto-unit -funique-section-names -fseparate-named-sections -fdata-sections -ffunction-sections  ' + ' '.join(cflags))
+    cmake_args.append('-DCMAKE_CXX_FLAGS=-flto=thin -fwhole-program-vtables -fsplit-lto-unit -funique-section-names -fseparate-named-sections -fdata-sections -ffunction-sections  ' + ' '.join(cxxflags))
+    cmake_args.append('-DCMAKE_EXE_LINKER_FLAGS=-flto=thin -fwhole-program-vtables -Wl,--lto-O3 -Wl,--lto-CGO3 -Wl,-mllvm,-import-instr-limit=5 -Wl,-mllvm,-enable-ext-tsp-block-placement -Wl,-z,keep-text-section-prefix -Wl,-O2 -Wl,--gc-sections ' + ' '.join(ldflags))
+    cmake_args.append('-DCMAKE_SHARED_LINKER_FLAGS=-flto=thin -fwhole-program-vtables -Wl,--lto-O3 -Wl,--lto-CGO3 -Wl,-mllvm,-import-instr-limit=5 -Wl,-mllvm,-enable-ext-tsp-block-placement -Wl,-z,keep-text-section-prefix -Wl,-O2 -Wl,--gc-sections ' + ' '.join(ldflags))
+    cmake_args.append('-DCMAKE_MODULE_LINKER_FLAGS=-flto=thin -fwhole-program-vtables -Wl,--lto-O3 -Wl,--lto-CGO3 -Wl,-mllvm,-import-instr-limit=5 -Wl,-mllvm,-enable-ext-tsp-block-placement -Wl,-z,keep-text-section-prefix -Wl,-O2 -Wl,--gc-sections ' + ' '.join(ldflags))
+  else:
+    cmake_args.append('-DCMAKE_C_FLAGS=-fdata-sections -ffunction-sections  ' + ' '.join(cflags))
+    cmake_args.append('-DCMAKE_CXX_FLAGS=-fdata-sections -ffunction-sections ' + ' '.join(cxxflags))
+    cmake_args.append('-DCMAKE_EXE_LINKER_FLAGS=-Wl,-O2 -Wl,--gc-sections ' + ' '.join(ldflags))
+    cmake_args.append('-DCMAKE_SHARED_LINKER_FLAGS=-Wl,-O2 -Wl,--gc-sections ' + ' '.join(ldflags))
+    cmake_args.append('-DCMAKE_MODULE_LINKER_FLAGS=-Wl,-O2 -Wl,--gc-sections ' + ' '.join(ldflags))
   if sys.platform == 'win32':
     cmake_args.append('-DLLVM_ENABLE_ZLIB=FORCE_ON')
 
@@ -1202,6 +1231,11 @@ def main():
             'CMAKE_SYSROOT=%s' % sysroot_i386,
             # TODO(crbug.com/40242553): pass proper flags to i386 tests so they compile correctly
             'LLVM_INCLUDE_TESTS=OFF',
+            'CMAKE_C_FLAGS=-O3 -march=x86-64-v3 -w ',
+            'CMAKE_CXX_FLAGS=-O3 -march=x86-64-v3 -w ',
+            'CMAKE_EXE_LINKER_FLAGS=-fuse-ld=lld -w ',
+            'CMAKE_SHARED_LINKER_FLAGS=-fuse-ld=lld -w ',
+            'CMAKE_MODULE_LINKER_FLAGS=-fuse-ld=lld -w ',
         ],
         "profile":
         True,
@@ -1211,6 +1245,11 @@ def main():
     runtimes_triples_args['x86_64-unknown-linux-gnu'] = {
         "args": [
             'CMAKE_SYSROOT=%s' % sysroot_amd64,
+            'CMAKE_C_FLAGS=-O3 -march=x86-64-v3 -w ',
+            'CMAKE_CXX_FLAGS=-O3 -march=x86-64-v3 -w ',
+            'CMAKE_EXE_LINKER_FLAGS=-fuse-ld=lld -w ',
+            'CMAKE_SHARED_LINKER_FLAGS=-fuse-ld=lld -w ',
+            'CMAKE_MODULE_LINKER_FLAGS=-fuse-ld=lld -w ',
         ],
         "profile": True,
         "sanitizers": True,
@@ -1459,8 +1498,8 @@ def main():
     # Instrument.
     RunCommand([
         'bin/llvm-bolt', 'bin/clang', '-o', 'bin/clang-bolt.inst',
-        '-instrument', '--instrumentation-file-append-pid',
-        '--instrumentation-file=' +
+        '-lite=false','-instrument', '-instrumentation-file-append-pid',
+        '-instrumentation-file=' +
         os.path.join(bolt_profiles_dir, 'prof.fdata')
     ])
     RunCommand([
@@ -1475,8 +1514,8 @@ def main():
     bolt_train_cmake_args = base_cmake_args + [
         '-DLLVM_TARGETS_TO_BUILD=X86',
         '-DLLVM_ENABLE_PROJECTS=clang',
-        '-DCMAKE_C_FLAGS=' + ' '.join(cflags),
-        '-DCMAKE_CXX_FLAGS=' + ' '.join(cxxflags),
++        '-DCMAKE_C_FLAGS=-ffp-contract=fast -fmerge-all-constants -mllvm -polly -Rpass-analysis=polly ' + ' '.join(cflags),
++        '-DCMAKE_CXX_FLAGS=-ffp-contract=fast -fmerge-all-constants -mllvm -polly -Rpass-analysis=polly ' + ' '.join(cxxflags),
         '-DCMAKE_EXE_LINKER_FLAGS=' + ' '.join(ldflags),
         '-DCMAKE_SHARED_LINKER_FLAGS=' + ' '.join(ldflags),
         '-DCMAKE_MODULE_LINKER_FLAGS=' + ' '.join(ldflags),
@@ -1506,7 +1545,12 @@ def main():
         'bin/llvm-bolt', 'bin/clang', '-o', 'bin/clang-bolt.opt', '-data',
         'merged.fdata', '-reorder-blocks=ext-tsp', '-reorder-functions=hfsort+',
         '-split-functions', '-split-all-cold', '-split-eh', '-dyno-stats',
-        '-icf=1', '-use-gnu-stack', '-use-old-text'
+        '-icf', '-use-gnu-stack', '-peepholes=all', '-elim-link-veneers',
+        '-group-stubs', '-align-blocks', '-sctc-mode=heuristic',
+        '-jump-tables=aggressive', '-simplify-rodata-loads', '-align-macro-fusion=all',
+        '-tail-duplication=cache', '-indirect-call-promotion=all', '-icp-eliminate-loads',
+        '-hot-data', '-x86-strip-redundant-address-size', '-reorder-functions-use-hot-size',
+        '-reorder-data-algo=funcs', '--use-old-text', '-lite=false',
     ])
 
     # Overwrite clang, preserving its timestamp so ninja doesn't rebuild it.
@@ -1516,26 +1560,28 @@ def main():
   if not args.build_mac_arm:
     VerifyVersionOfBuiltClangMatchesVERSION()
     VerifyZlibSupport()
-  if args.with_zstd:
     VerifyZStdSupport()
 
   # Run tests.
-  if (chrome_tools and not args.build_mac_arm and
-      (args.run_tests or args.llvm_force_head_revision)):
-    RunCommand(['ninja', '-C', LLVM_BUILD_DIR, 'cr-check-all'], setenv=True)
+  # if (chrome_tools and not args.build_mac_arm and
+  #     (args.run_tests or args.llvm_force_head_revision)):
+  #   RunCommand(['ninja', '-C', LLVM_BUILD_DIR, 'cr-check-all'], setenv=True)
 
-  if not args.build_mac_arm and args.run_tests:
-    RunCommand(['ninja', '-C', LLVM_BUILD_DIR, 'check-all'],
-               env=test_env,
-               setenv=True)
-  if args.install_dir:
-    RunCommand(['ninja', 'install'], setenv=True)
+  # if not args.build_mac_arm and args.run_tests:
+  #   RunCommand(['ninja', '-C', LLVM_BUILD_DIR, 'check-all'],
+  #              env=test_env,
+  #              setenv=True)
+  # if args.install_dir:
+  #   RunCommand(['ninja', 'install'], setenv=True)
 
   WriteStampFile(PACKAGE_VERSION, STAMP_FILE)
   WriteStampFile(PACKAGE_VERSION, FORCE_HEAD_REVISION_FILE)
+  
+  RunCommand(['ln', '--symbolic', '--relative', '-f', 'bin/clang', 'bin/clang++'])
+  RunCommand(['ln', '--symbolic', '--relative', '-f', 'bin/clang', 'bin/clang-cl'])
+  
   print('Clang build was successful.')
   return 0
 
-
 if __name__ == '__main__':
   sys.exit(main())
